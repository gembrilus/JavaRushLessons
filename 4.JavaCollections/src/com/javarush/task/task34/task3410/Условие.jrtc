taskKey="com.javarush.task.task34.task3410.big04"\n\nSokoban (4)

Общий класс игровых объектов GameObject уже есть. Пришло время создать классы
конкретных типов игровых объектов.
4.1. Часть игровых объектов могут двигаться (игрок и ящики), а часть нет, например, стены
и дома.
4.1.1. Добавь интерфейс Movable в пакет model.
4.1.2. Интерфейс Movable должен иметь метод void move(int x, int y).
4.2. Добавь enum Direction в пакет model. Он должен содержать следующие значения:
LEFT, RIGHT, UP и DOWN. Этот тип будет использоваться для описания направления
движения объектов.
4.3. Игровые объекты типа “дом” не поддерживают логики столкновений (игрок или
ящики могут свободно передвигаться по ним). Что касается остальных объектов, то
они не должны проходить сквозь друг друга, они должны сталкиваться. Например,
ящик нельзя протолкнуть сквозь стену.
4.3.1. Добавь абстрактный класс CollisionObject в пакет model.
4.3.2. Класс CollisionObject должен быть унаследован от GameObject.
4.3.3. Добавь в класс CollisionObject:
4.3.3.1. Конструктор, принимающий int x и int y.
4.3.3.2. Метод boolean isCollision(GameObject gameObject, Direction direction).
Этот метод должен возвращаться true, если при перемещении текущего
объекта в направлении direction на FIELD_CELL_SIZE произойдет
столкновение с объектом gameObject, переданным в качестве параметра.
Иначе – возвращать false. Столкновением считать совпадение координат x и y.


Требования:
1.	Добавь интерфейс Movable в пакет model.
2.	Интерфейс Movable должен объявлять метод void move(int x, int y).
3.	Добавь enum Direction в пакет model. Он должен содержать следующие значения: LEFT, RIGHT, UP и DOWN.
4.	Добавь абстрактный класс CollisionObject в пакет model.
5.	Класс CollisionObject должен быть унаследован от GameObject.
6.	Добавь в класс CollisionObject конструктор, принимающий int x и int y.
7.	Добавь в класс CollisionObject метод boolean isCollision(GameObject gameObject, Direction direction), реализующий поведение описанное в задании.


Sokoban (4)

Общий класс игровых объектов GameObject уже есть. Пришло время создать классы
конкретных типов игровых объектов.
4.1. Часть игровых объектов могут двигаться (игрок и ящики), а часть нет, например, стены
и дома.
4.1.1. Добавь интерфейс Movable в пакет model.
4.1.2. Интерфейс Movable должен иметь метод void move(int x, int y).
4.2. Добавь enum Direction в пакет model. Он должен содержать следующие значения:
LEFT, RIGHT, UP и DOWN. Этот тип будет использоваться для описания направления
движения объектов.
4.3. Игровые объекты типа “дом” не поддерживают логики столкновений (игрок или
ящики могут свободно передвигаться по ним). Что касается остальных объектов, то
они не должны проходить сквозь друг друга, они должны сталкиваться. Например,
ящик нельзя протолкнуть сквозь стену.
4.3.1. Добавь абстрактный класс CollisionObject в пакет model.
4.3.2. Класс CollisionObject должен быть унаследован от GameObject.
4.3.3. Добавь в класс CollisionObject:
4.3.3.1. Конструктор, принимающий int x и int y.
4.3.3.2. Метод boolean isCollision(GameObject gameObject, Direction direction).
Этот метод должен возвращаться true, если при перемещении текущего
объекта в направлении direction на FIELD_CELL_SIZE произойдет
столкновение с объектом gameObject, переданным в качестве параметра.
Иначе – возвращать false. Столкновением считать совпадение координат x и y.



Sokoban (4)

Общий класс игровых объектов GameObject уже есть. Пришло время создать классы
конкретных типов игровых объектов.
4.1. Часть игровых объектов могут двигаться (игрок и ящики), а часть нет, например, стены
и дома.
4.1.1. Добавь интерфейс Movable в пакет model.
4.1.2. Интерфейс Movable должен иметь метод void move(int x, int y).
4.2. Добавь enum Direction в пакет model. Он должен содержать следующие значения:
LEFT, RIGHT, UP и DOWN. Этот тип будет использоваться для описания направления
движения объектов.
4.3. Игровые объекты типа “дом” не поддерживают логики столкновений (игрок или
ящики могут свободно передвигаться по ним). Что касается остальных объектов, то
они не должны проходить сквозь друг друга, они должны сталкиваться. Например,
ящик нельзя протолкнуть сквозь стену.
4.3.1. Добавь абстрактный класс CollisionObject в пакет model.
4.3.2. Класс CollisionObject должен быть унаследован от GameObject.
4.3.3. Добавь в класс CollisionObject:
4.3.3.1. Конструктор, принимающий int x и int y.
4.3.3.2. Метод boolean isCollision(GameObject gameObject, Direction direction).
Этот метод должен возвращаться true, если при перемещении текущего
объекта в направлении direction на FIELD_CELL_SIZE произойдет
столкновение с объектом gameObject, переданным в качестве параметра.
Иначе – возвращать false. Столкновением считать совпадение координат x и y.



Sokoban (4)

Общий класс игровых объектов GameObject уже есть. Пришло время создать классы
конкретных типов игровых объектов.
4.1. Часть игровых объектов могут двигаться (игрок и ящики), а часть нет, например, стены
и дома.
4.1.1. Добавь интерфейс Movable в пакет model.
4.1.2. Интерфейс Movable должен иметь метод void move(int x, int y).
4.2. Добавь enum Direction в пакет model. Он должен содержать следующие значения:
LEFT, RIGHT, UP и DOWN. Этот тип будет использоваться для описания направления
движения объектов.
4.3. Игровые объекты типа “дом” не поддерживают логики столкновений (игрок или
ящики могут свободно передвигаться по ним). Что касается остальных объектов, то
они не должны проходить сквозь друг друга, они должны сталкиваться. Например,
ящик нельзя протолкнуть сквозь стену.
4.3.1. Добавь абстрактный класс CollisionObject в пакет model.
4.3.2. Класс CollisionObject должен быть унаследован от GameObject.
4.3.3. Добавь в класс CollisionObject:
4.3.3.1. Конструктор, принимающий int x и int y.
4.3.3.2. Метод boolean isCollision(GameObject gameObject, Direction direction).
Этот метод должен возвращаться true, если при перемещении текущего
объекта в направлении direction на FIELD_CELL_SIZE произойдет
столкновение с объектом gameObject, переданным в качестве параметра.
Иначе – возвращать false. Столкновением считать совпадение координат x и y.



